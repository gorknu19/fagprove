// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//database data
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account tabell for prisma adapter linket til next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// session tabell for prisma adapter linket til next auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// user tabell for prisma adapter linket til next auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  whitelisted   Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

// verification tabell for prisma adapter linket til next auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model for hvordan posts ser ut på databse, med link til users og comments
model Post {
  id             String    @id @unique @default(uuid())
  name           String
  type           String
  operation      String
  storageSpace   String
  extraEquipment String
  datePurchased  DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  Comment        Comment[]
  Image          Image?    @relation(fields: [imageId], references: [id])
  imageId        String?
}

// model til utformingen til comment, med link til User og posts
model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
}

//model for hvordan lagring av bilde data er på databasen, med link til post
model Image {
  id       String @id @default(uuid())
  imageId  String @unique
  path     String
  filename String
  post     Post[]
}
